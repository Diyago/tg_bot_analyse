# This will be the main entry point for the bot.
import asyncio
import logging
from collections import defaultdict, deque
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest

from config import TELEGRAM_BOT_TOKEN
from ai_analyzer import get_analysis

# --- In-Memory Cache ---
MESSAGE_CACHE = defaultdict(lambda: deque(maxlen=200))

# --- Command Handlers ---

async def start_handler(message: Message):
    """Handles the /start command in private chats."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –ö–æ—É—á. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –≤–∞–º "
        "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Ç–∞—Ö.\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –∏ —è –Ω–∞—á–Ω—É —Å–æ–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (—è –Ω–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏!). "
        "–ö–æ–≥–¥–∞ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –ø—Ä—è–º–æ –≤ –≥—Ä—É–ø–ø–µ.\n\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help."
    )

async def help_handler(message: Message):
    """Handles the /help command in private chats."""
    await message.answer(
        "üìå **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**\n\n"
        "1. **–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≤–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.**\n"
        "   –Ø –Ω–∞—á–Ω—É —Å–æ–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "2. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–≤ –≥—Ä—É–ø–ø–µ):**\n"
        "   - `/analyze_last_100` ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "   - `/analyze_last_24h` ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.\n\n"
        "3. **–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç:**\n"
        "   –û—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–∏–¥–µ—Ç –≤–∞–º –≤ **–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è**, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "üîí **–í–∞–∂–Ω–æ:** –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–Ω–∞–ª–∏–∑. "
        "–û—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–æ–º—É, –∫—Ç–æ –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É."
    )

# --- Message Caching Handler ---

async def cache_group_messages(message: Message):
    """Catches all text messages in groups and saves them to the cache."""
    if message.text and message.from_user:
        chat_id = message.chat.id
        MESSAGE_CACHE[chat_id].append({
            "text": message.text,
            "user_id": message.from_user.id,
            "user_name": message.from_user.full_name,
            "timestamp": message.date,
        })
        logging.info(f"Cached message from {message.from_user.full_name} in chat {chat_id}")

# --- Analysis Handler ---

async def analyze_handler(message: Message, bot: Bot):
    """Handles the /analyze commands in group chats."""
    if not message.from_user:
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    command = message.text.split()[0] if message.text else ""

    # 1. Check if the user is an admin
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            return
    except TelegramBadRequest:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è –∏–º–µ—é –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    # 2. Get messages from cache
    chat_messages = list(MESSAGE_CACHE[chat_id])
    if not chat_messages:
        await message.reply("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –Ø —Å–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –º–æ–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç.")
        return

    messages_to_analyze = []
    if command == "/analyze_last_100":
        messages_to_analyze = chat_messages[-100:]
    elif command == "/analyze_last_24h":
        one_day_ago = datetime.now().astimezone() - timedelta(hours=24)
        messages_to_analyze = [msg for msg in chat_messages if msg["timestamp"] > one_day_ago]

    if not messages_to_analyze:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    # 3. Notify user and run analysis
    try:
        await bot.send_message(user_id, "–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    except TelegramBadRequest:
        bot_info = await bot.get_me()
        await message.reply(
            "–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –æ—Ç—á–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π (@{bot_info.username}) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    report = await get_analysis(messages_to_analyze)
    await bot.send_message(user_id, report, parse_mode="Markdown")


async def main():
    logging.basicConfig(level=logging.INFO)

    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()

    # Pass the bot instance to the dispatcher to make it available in handlers
    dp["bot"] = bot

    # Register handlers for private chats only
    dp.message.register(start_handler, CommandStart(), F.chat.type == "private")
    dp.message.register(help_handler, Command("help"), F.chat.type == "private")

    # Register handler for analysis commands in groups
    dp.message.register(
        analyze_handler,
        Command("analyze_last_100", "analyze_last_24h"),
        F.chat.type.in_({"group", "supergroup"})
    )

    # Register handler for caching group messages
    dp.message.register(cache_group_messages, F.text, F.chat.type.in_({"group", "supergroup"}))


    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
