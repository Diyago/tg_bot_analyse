import asyncio
import logging
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ChatMemberOwner, ChatMemberAdministrator
from aiogram.enums import ChatType
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
import re

from ai_analyzer import CommunicationAnalyzer
from message_cache import MessageCache
from config import Config

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# Initialize services
message_cache = MessageCache(max_size=Config.CACHE_SIZE)
ai_analyzer = CommunicationAnalyzer()

# Track command usage for rate limiting
user_last_command = {}


def is_user_authorized(user_id: int) -> bool:
    """Check if user is in the authorized users list"""
    return user_id in Config.AUTHORIZED_USERS


def is_main_admin(user_id: int) -> bool:
    """Check if user is the main admin (first in the list)"""
    return len(Config.AUTHORIZED_USERS) > 0 and user_id == Config.AUTHORIZED_USERS[0]


def add_authorized_user(user_id: int) -> bool:
    """Add user to authorized list"""
    if user_id not in Config.AUTHORIZED_USERS:
        Config.AUTHORIZED_USERS.append(user_id)
        return True
    return False


def remove_authorized_user(user_id: int) -> bool:
    """Remove user from authorized list"""
    if user_id in Config.AUTHORIZED_USERS and not is_main_admin(user_id):
        Config.AUTHORIZED_USERS.remove(user_id)
        return True
    return False


def check_rate_limit(user_id: int) -> bool:
    """Check if user can execute command (rate limiting)"""
    now = datetime.now()
    if user_id in user_last_command:
        time_diff = now - user_last_command[user_id]
        if time_diff < timedelta(seconds=Config.RATE_LIMIT_SECONDS):
            return False
    user_last_command[user_id] = now
    return True


def escape_markdown_v2(text: str) -> str:
    """Escape special characters for Telegram MarkdownV2"""
    # Characters that need to be escaped in MarkdownV2
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


async def safe_send_message(bot_or_message, chat_id: int = None, text: str = "", **kwargs):
    """Safely send a message, falling back to plain text if markdown fails"""
    try:
        if hasattr(bot_or_message, 'send_message'):  # It's a bot instance
            return await bot_or_message.send_message(chat_id=chat_id, text=text, **kwargs)
        else:  # It's a message instance
            return await bot_or_message.answer(text=text, **kwargs)
    except TelegramBadRequest as e:
        if "can't parse entities" in str(e).lower():
            # Remove parse_mode and try again with plain text
            kwargs.pop('parse_mode', None)
            if hasattr(bot_or_message, 'send_message'):
                return await bot_or_message.send_message(chat_id=chat_id, text=text, **kwargs)
            else:
                return await bot_or_message.answer(text=text, **kwargs)
        else:
            raise


async def safe_edit_message(message, text: str, **kwargs):
    """Safely edit a message, handling cases where message might not exist"""
    try:
        return await message.edit_text(text=text, **kwargs)
    except TelegramBadRequest as e:
        if "message to edit not found" in str(e).lower():
            # Message was already deleted, do nothing
            return None
        elif "can't parse entities" in str(e).lower():
            # Remove parse_mode and try again with plain text
            kwargs.pop('parse_mode', None)
            return await message.edit_text(text=text, **kwargs)
        else:
            raise


@dp.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command in private messages"""
    if message.chat.type != ChatType.PRIVATE:
        return
    
    welcome_text = """
ü§ñ **–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –ö–æ—É—á**

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—á–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
3. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
"""
    await safe_send_message(message, text=welcome_text, parse_mode='Markdown')


@dp.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command in private messages"""
    if message.chat.type != ChatType.PRIVATE:
        return
    
    help_text = """
üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

**–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):**
‚Ä¢ `/analyze_last_100` ‚Äî –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ `/analyze_last_24h` ‚Äî –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
‚Ä¢ `/my_communication` ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
‚Ä¢ `/analyze_user @username` ‚Äî –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
‚Ä¢ `/chat_stats` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ

**–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:**
‚Ä¢ `/analyze_user_all @username` ‚Äî –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º
‚Ä¢ `/analyze_user_all <user_id>` ‚Äî –∞–Ω–∞–ª–∏–∑ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞):**
‚Ä¢ `/add_user @username` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
‚Ä¢ `/add_user <user_id>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/add_user` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/remove_user @username` –∏–ª–∏ `/remove_user <user_id>` ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/remove_user` ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ `/list_users` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–í–∞–∂–Ω–æ:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
‚Ä¢ –û—Ç—á–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ {0} —Å–µ–∫—É–Ω–¥

**–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:**
‚Ä¢ –¢–æ–Ω –æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
‚Ä¢ –û–±—â–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥–µ

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ.
""".format(Config.RATE_LIMIT_SECONDS)
    
    await safe_send_message(message, text=help_text, parse_mode='Markdown')


@dp.message(Command("analyze_last_100"))
async def analyze_last_100(message: Message):
    """Analyze last 100 messages"""
    await handle_analysis_command(message, "last_100")


@dp.message(Command("analyze_last_24h"))
async def analyze_last_24h(message: Message):
    """Analyze messages from last 24 hours"""
    await handle_analysis_command(message, "last_24h")


@dp.message(Command("add_user"))
async def add_user_command(message: Message):
    """Add user to authorized list (main admin only)"""
    if message.chat.type == ChatType.PRIVATE:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # Check if user is main admin
    if not is_main_admin(user_id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # Check if this is a reply to someone's message
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
        new_user_id = target_user.id
        username = target_user.username or target_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        if add_authorized_user(new_user_id):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {new_user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
            logger.info(f"User {new_user_id} (@{username}) added to authorized list by {user_id}")
        else:
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {new_user_id}) —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
        return
    
    # Parse user ID or username from command
    try:
        command_parts = (message.text or "").split()
        if len(command_parts) != 2:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ /add_user <user_id> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ ID\n"
                "‚Ä¢ /add_user @username - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ username\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /add_user"
            )
            return
        
        user_input = command_parts[1]
        
        # If it starts with @, it's a username
        if user_input.startswith('@'):
            username = user_input[1:]  # Remove @
            try:
                # Try to get user info by username
                chat_member = await bot.get_chat_member(message.chat.id, username)
                new_user_id = chat_member.user.id
                
                if add_authorized_user(new_user_id):
                    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {new_user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
                    logger.info(f"User {new_user_id} (@{username}) added to authorized list by {user_id}")
                else:
                    await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {new_user_id}) —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
                    
            except Exception as e:
                await message.answer(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —á–∞—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID."
                )
                logger.error(f"Error finding user @{username}: {e}")
        else:
            # Try to parse as numeric ID
            new_user_id = int(user_input)
            
            if add_authorized_user(new_user_id):
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
                logger.info(f"User {new_user_id} added to authorized list by {user_id}")
            else:
                await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        logger.error(f"Error adding user: {e}")


@dp.message(Command("remove_user"))
async def remove_user_command(message: Message):
    """Remove user from authorized list (main admin only)"""
    if message.chat.type == ChatType.PRIVATE:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # Check if user is main admin
    if not is_main_admin(user_id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # Check if this is a reply to someone's message
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id
        username = target_user.username or target_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        if remove_authorized_user(target_user_id):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {target_user_id}) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
            logger.info(f"User {target_user_id} (@{username}) removed from authorized list by {user_id}")
        else:
            await message.answer(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    
    # Parse user ID or username from command
    try:
        command_parts = (message.text or "").split()
        if len(command_parts) != 2:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ /remove_user <user_id> - —É–¥–∞–ª–∏—Ç—å –ø–æ ID\n"
                "‚Ä¢ /remove_user @username - —É–¥–∞–ª–∏—Ç—å –ø–æ username\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /remove_user"
            )
            return
        
        user_input = command_parts[1]
        
        # If it starts with @, it's a username
        if user_input.startswith('@'):
            username = user_input[1:]  # Remove @
            try:
                # Try to get user info by username
                chat_member = await bot.get_chat_member(message.chat.id, username)
                target_user_id = chat_member.user.id
                
                if remove_authorized_user(target_user_id):
                    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {target_user_id}) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
                    logger.info(f"User {target_user_id} (@{username}) removed from authorized list by {user_id}")
                else:
                    await message.answer(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    
            except Exception as e:
                await message.answer(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —á–∞—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID."
                )
                logger.error(f"Error finding user @{username}: {e}")
        else:
            # Try to parse as numeric ID
            target_user_id = int(user_input)
            
            if remove_authorized_user(target_user_id):
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.")
                logger.info(f"User {target_user_id} removed from authorized list by {user_id}")
            else:
                await message.answer(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        logger.error(f"Error removing user: {e}")


@dp.message(Command("list_users"))
async def list_users_command(message: Message):
    """Show list of authorized users (main admin only)"""
    if message.chat.type == ChatType.PRIVATE:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # Check if user is main admin
    if not is_main_admin(user_id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    if not Config.AUTHORIZED_USERS:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    user_list = "üìù **–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
    for i, uid in enumerate(Config.AUTHORIZED_USERS):
        role = " (–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)" if i == 0 else ""
        user_list += f"‚Ä¢ `{uid}`{role}\n"
    
    await safe_send_message(message, text=user_list, parse_mode='Markdown')


@dp.message(Command("chat_stats"))
async def chat_stats_command(message: Message):
    """Show chat cache statistics (authorized users only)"""
    if message.chat.type == ChatType.PRIVATE:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # Check if user is authorized
    if not is_user_authorized(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # Get cache statistics
    cache_stats = message_cache.get_chat_stats(chat_id)
    
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ '{message.chat.title}'**\n\n"
    stats_text += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–µ—à–µ:** {cache_stats['total_messages']}\n"
    stats_text += f"üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {cache_stats['unique_users']}\n"
    
    if cache_stats['oldest_message']:
        stats_text += f"üìÖ **–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–µ—à–µ:** {cache_stats['oldest_message'].strftime('%Y-%m-%d %H:%M')}\n"
    else:
        stats_text += f"üìÖ **–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–µ—à–µ:** –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
    if cache_stats['newest_message']:
        stats_text += f"üïê **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–µ—à–µ:** {cache_stats['newest_message'].strftime('%Y-%m-%d %H:%M')}\n"
    else:
        stats_text += f"üïê **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–µ—à–µ:** –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    stats_text += f"\nüîß **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞:** {Config.CACHE_SIZE} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    if cache_stats['total_messages'] == 0:
        stats_text += "\n‚ùó **–í–Ω–∏–º–∞–Ω–∏–µ:** –ö–µ—à –ø—É—Å—Ç. –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
    elif cache_stats['total_messages'] < 10:
        stats_text += "\nüí° **–°–æ–≤–µ—Ç:** –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 20-50 —Å–æ–æ–±—â–µ–Ω–∏–π."
    
    await safe_send_message(message, text=stats_text, parse_mode='Markdown')


@dp.message(Command("my_communication"))
async def my_communication_command(message: Message):
    """Analyze personal communication style (authorized users only)"""
    if message.chat.type == ChatType.PRIVATE:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # Check if user is authorized
    if not is_user_authorized(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # Check rate limiting
    if not check_rate_limit(user_id):
        await message.answer(
            f"‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {Config.RATE_LIMIT_SECONDS} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."
        )
        return
    
    # Show thinking message
    thinking_msg = await message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏...")
    
    try:
        # Get user's messages
        user_messages = message_cache.get_user_messages(chat_id, user_id)
        
        # Get user's interactions with others
        interactions = message_cache.get_user_interactions(chat_id, user_id)
        
        if not user_messages:
            await safe_edit_message(
                thinking_msg,
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–∞—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. "
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # Perform personal analysis
        analysis_result = await ai_analyzer.analyze_user_communication(
            user_messages, interactions, username
        )
        
        # Delete thinking message and send private analysis
        await thinking_msg.delete()
        
        # Send analysis privately to user
        await safe_send_message(
            bot,
            chat_id=user_id,
            text=analysis_result,
            parse_mode='Markdown'
        )
        
        # Confirm in group chat
        await message.answer(
            f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @{username} –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        
        logger.info(f"Personal analysis completed for user {user_id} in chat {chat_id}")
        
    except Exception as e:
        await safe_edit_message(thinking_msg, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        logger.error(f"Personal analysis error: {e}")


@dp.message(Command("analyze_user"))
async def analyze_user_command(message: Message):
    """Analyze specific user's communication style (authorized users only)"""
    if message.chat.type == ChatType.PRIVATE:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # Check if user is authorized
    if not is_user_authorized(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # Check rate limiting
    if not check_rate_limit(user_id):
        await message.answer(
            f"‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {Config.RATE_LIMIT_SECONDS} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."
        )
        return
    
    target_user_id = None
    target_username = None
    
    # Check if replying to a message
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user_id = message.reply_to_message.from_user.id
        target_username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    else:
        # Parse username from command
        command_parts = (message.text or "").split()
        if len(command_parts) < 2:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ `/analyze_user @username` - –∞–Ω–∞–ª–∏–∑ –ø–æ –∏–º–µ–Ω–∏\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π `/analyze_user`"
            )
            return
        
        user_input = command_parts[1]
        if user_input.startswith('@'):
            username = user_input[1:]
            try:
                # Try to find user by username in cached messages
                all_messages = message_cache.get_last_n_messages(chat_id, 1000)
                for msg in all_messages:
                    if msg.get('username', '').lower() == username.lower():
                        target_user_id = msg['user_id']
                        target_username = msg['username']
                        break
                
                if not target_user_id:
                    await message.answer(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞. "
                        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /analyze_user."
                    )
                    return
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
                return
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username.")
            return
    
    if not target_user_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    
    # Show thinking message
    thinking_msg = await message.answer(f"ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ {target_username}...")
    
    try:
        # Get target user's messages
        user_messages = message_cache.get_user_messages(chat_id, target_user_id)
        
        # Get target user's interactions with others
        interactions = message_cache.get_user_interactions(chat_id, target_user_id)
        
        if not user_messages:
            await safe_edit_message(
                thinking_msg,
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {target_username} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return
        
        # Perform personal analysis
        analysis_result = await ai_analyzer.analyze_user_communication(
            user_messages, interactions, target_username
        )
        
        # Delete thinking message and send private analysis
        await thinking_msg.delete()
        
        # Send analysis privately to requesting user
        await safe_send_message(
            bot,
            chat_id=user_id,
            text=analysis_result,
            parse_mode='Markdown'
        )
        
        # Confirm in group chat
        await message.answer(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ {target_username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        
        logger.info(f"User analysis completed for target {target_user_id} by user {user_id} in chat {chat_id}")
        
    except Exception as e:
        await safe_edit_message(thinking_msg, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        logger.error(f"User analysis error: {e}")


@dp.message(Command("analyze_user_all"))
async def analyze_user_all_command(message: Message):
    """Analyze specific user's communication style across all chats (authorized users only)"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    is_private_chat = message.chat.type == ChatType.PRIVATE
    
    # Check if user is authorized
    if not is_user_authorized(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # Check rate limiting
    if not check_rate_limit(user_id):
        await message.answer(
            f"‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {Config.RATE_LIMIT_SECONDS} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."
        )
        return
    
    target_user_id = None
    target_username = None
    
    # Check if replying to a message (only in group chats)
    if not is_private_chat and message.reply_to_message and message.reply_to_message.from_user:
        target_user_id = message.reply_to_message.from_user.id
        target_username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    else:
        # Parse username or user_id from command
        command_parts = (message.text or "").split()
        if len(command_parts) < 2:
            usage_text = "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n‚Ä¢ `/analyze_user_all @username` - –∞–Ω–∞–ª–∏–∑ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤"
            if not is_private_chat:
                usage_text += "\n‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π `/analyze_user_all`"
            usage_text += "\n‚Ä¢ `/analyze_user_all <user_id>` - –∞–Ω–∞–ª–∏–∑ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            await message.answer(usage_text)
            return
        
        user_input = command_parts[1]
        if user_input.startswith('@'):
            # Username search
            username = user_input[1:]
            try:
                # Try to find user by username in cached messages from all chats
                for chat_id in message_cache.get_all_chats():
                    all_messages = message_cache.get_last_n_messages(chat_id, 1000)
                    for msg in all_messages:
                        if msg.get('username', '').lower() == username.lower():
                            target_user_id = msg['user_id']
                            target_username = msg['username']
                            break
                    if target_user_id:
                        break
                
                if not target_user_id:
                    await message.answer(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —á–∞—Ç–æ–≤."
                    )
                    return
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
                return
        elif user_input.isdigit():
            # User ID search
            target_user_id = int(user_input)
            # Try to find username in cache
            for chat_id in message_cache.get_all_chats():
                all_messages = message_cache.get_last_n_messages(chat_id, 1000)
                for msg in all_messages:
                    if msg.get('user_id') == target_user_id:
                        target_username = msg.get('username', f"User_{target_user_id}")
                        break
                if target_username:
                    break
            
            if not target_username:
                target_username = f"User_{target_user_id}"
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username, —á–∏—Å–ª–æ–≤–æ–π user_id" + 
                (" –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è." if not is_private_chat else ".")
            )
            return
    
    # Show thinking message
    thinking_msg = await message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")
    
    try:
        # Get user's messages from all chats
        user_messages = message_cache.get_user_messages_all_chats(target_user_id)
        
        # Get user's interactions with others from all chats
        interactions = message_cache.get_user_interactions_all_chats(target_user_id)
        
        # Get user stats across all chats
        user_stats = message_cache.get_user_chat_stats(target_user_id)
        
        if not user_messages:
            await thinking_msg.edit_text(
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {target_username} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤. "
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç—ã."
            )
            return
        
        # Perform personal analysis
        analysis_result = await ai_analyzer.analyze_user_communication(
            user_messages, interactions, target_username
        )
        
        # Add cross-chat statistics to the analysis
        stats_summary = (
            f"\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_stats['total_messages']}\n"
            f"‚Ä¢ –ß–∞—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: {user_stats['chats_count']}\n"
        )
        
        if user_stats['oldest_message'] and user_stats['newest_message']:
            stats_summary += (
                f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_stats['oldest_message'].strftime('%Y-%m-%d')} - "
                f"{user_stats['newest_message'].strftime('%Y-%m-%d')}\n"
            )
        
        # Combine analysis with statistics
        full_analysis = analysis_result + stats_summary
        
        # Delete thinking message
        await thinking_msg.delete()
        
        if is_private_chat:
            # In private chat, send analysis directly to this chat
            await safe_send_message(
                message,
                text=full_analysis,
                parse_mode='Markdown'
            )
        else:
            # In group chat, send analysis privately to requesting user
            await safe_send_message(
                bot,
                chat_id=user_id,
                text=full_analysis,
                parse_mode='Markdown'
            )
            
            # Confirm in group chat
            await message.answer(
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ {target_username} –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {user_stats['total_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {user_stats['chats_count']} —á–∞—Ç–æ–≤."
            )
        
        logger.info(f"Cross-chat user analysis completed for target {target_user_id} by user {user_id}")
        
    except Exception as e:
        await safe_edit_message(thinking_msg, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        logger.error(f"Cross-chat user analysis error: {e}")


async def handle_analysis_command(message: Message, analysis_type: str):
    """Handle analysis commands with common logic"""
    # Only work in group chats
    if message.chat.type == ChatType.PRIVATE:
        await message.answer("–ö–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # Check if user is authorized
    if not is_user_authorized(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # Check rate limiting
    if not check_rate_limit(user_id):
        await message.answer(
            f"‚è± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {Config.RATE_LIMIT_SECONDS} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."
        )
        return
    
    # Get messages based on analysis type
    if analysis_type == "last_100":
        messages = message_cache.get_last_n_messages(chat_id, 100)
        analysis_description = "–ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–æ–æ–±—â–µ–Ω–∏–π"
    elif analysis_type == "last_24h":
        messages = message_cache.get_messages_since(chat_id, datetime.now() - timedelta(hours=24))
        analysis_description = "—Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞.")
        return
    
    if not messages:
        # Get cache stats to provide better feedback
        cache_stats = message_cache.get_chat_stats(chat_id)
        if cache_stats['total_messages'] == 0:
            await message.answer(
                "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "üîç **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                "‚Ä¢ –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ –∏ –µ—â–µ –Ω–µ –Ω–∞–∫–æ–ø–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ –ë–æ—Ç—ã –≤ Telegram –Ω–µ –≤–∏–¥—è—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–æ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç\n"
                "‚Ä¢ –í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è)\n\n"
                "üí° **–†–µ—à–µ–Ω–∏–µ:** –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞–ø–∏—à—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞."
            )
        else:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {analysis_description}.\n\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–µ—à–µ: {cache_stats['total_messages']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cache_stats['unique_users']}\n"
                f"‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {cache_stats['oldest_message'].strftime('%Y-%m-%d %H:%M') if cache_stats['oldest_message'] else '–ù–µ—Ç'}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ."
            )
        return
    
    # Send notification in group chat
    await message.answer(
        f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {analysis_description} ({len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π). "
        f"–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    
    # Send private notification about analysis start
    try:
        await bot.send_message(
            user_id,
            f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {analysis_description} –∏–∑ —á–∞—Ç–∞ '{message.chat.title}'. "
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
        )
    except Exception as e:
        logger.error(f"Failed to send private notification: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return
    
    # Perform analysis
    try:
        analysis_result = await ai_analyzer.analyze_messages(messages)
        
        # Send analysis result privately
        await safe_send_message(
            bot,
            chat_id=user_id,
            text=f"üìä **–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π: {message.chat.title}**\n\n{analysis_result}",
            parse_mode='Markdown'
        )
        
        logger.info(f"Analysis completed for user {user_id} in chat {chat_id}")
        
    except Exception as e:
        logger.error(f"Analysis failed: {e}")
        await safe_send_message(
            bot,
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.",
            parse_mode='Markdown'
        )


@dp.message(F.text & F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def cache_group_message(message: Message):
    """Cache all text messages from group chats"""
    # Skip bot commands
    if message.text and message.text.startswith('/'):
        return
    
    # Skip if no user info or text
    if not message.from_user or not message.text:
        return
    
    # Cache the message
    message_cache.add_message(
        chat_id=message.chat.id,
        user_id=message.from_user.id,
        username=message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        text=message.text,
        timestamp=datetime.now()
    )
    
    # Log every 10th message for monitoring
    cache_stats = message_cache.get_chat_stats(message.chat.id)
    if cache_stats['total_messages'] % 10 == 0:
        logger.info(f"Chat {message.chat.id} now has {cache_stats['total_messages']} cached messages from {cache_stats['unique_users']} users")


async def main():
    """Main function to start the bot"""
    logger.info("Starting Communication Coach Bot...")
    
    # Check required environment variables
    if not Config.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not found in environment variables")
        return
    
    if not Config.OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY not found in environment variables")
        return
    
    if not Config.AUTHORIZED_USERS:
        logger.warning("No authorized users configured. Set AUTHORIZED_USERS environment variable with comma-separated user IDs.")
        logger.warning("Example: AUTHORIZED_USERS=123456789,987654321")
    else:
        logger.info(f"Authorized users: {Config.AUTHORIZED_USERS}")
        logger.info(f"Main admin: {Config.AUTHORIZED_USERS[0]}")
    
    try:
        # Start polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot failed to start: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
